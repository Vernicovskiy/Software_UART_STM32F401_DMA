
Software_Uart_CMSIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000518  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  080006ac  080006ac  000106ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080006b4  080006b4  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080006b4  080006b4  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006b4  080006b4  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006b4  080006b4  000106b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006b8  080006b8  000106b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  080006bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000018  080006d4  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  080006d4  00020038  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001185  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003d5  00000000  00000000  00021210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c8  00000000  00000000  000215e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000008a  00000000  00000000  000216b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000dc45  00000000  00000000  0002173a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000d1b  00000000  00000000  0002f37f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0004fb76  00000000  00000000  0003009a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000234  00000000  00000000  0007fc10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0007fe44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000018 	.word	0x20000018
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000694 	.word	0x08000694

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000001c 	.word	0x2000001c
 80001d0:	08000694 	.word	0x08000694

080001d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001d8:	4b06      	ldr	r3, [pc, #24]	; (80001f4 <SystemInit+0x20>)
 80001da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001de:	4a05      	ldr	r2, [pc, #20]	; (80001f4 <SystemInit+0x20>)
 80001e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80001e8:	bf00      	nop
 80001ea:	46bd      	mov	sp, r7
 80001ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f0:	4770      	bx	lr
 80001f2:	bf00      	nop
 80001f4:	e000ed00 	.word	0xe000ed00

080001f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	4603      	mov	r3, r0
 8000200:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000206:	2b00      	cmp	r3, #0
 8000208:	db0b      	blt.n	8000222 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800020a:	79fb      	ldrb	r3, [r7, #7]
 800020c:	f003 021f 	and.w	r2, r3, #31
 8000210:	4907      	ldr	r1, [pc, #28]	; (8000230 <__NVIC_EnableIRQ+0x38>)
 8000212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000216:	095b      	lsrs	r3, r3, #5
 8000218:	2001      	movs	r0, #1
 800021a:	fa00 f202 	lsl.w	r2, r0, r2
 800021e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000222:	bf00      	nop
 8000224:	370c      	adds	r7, #12
 8000226:	46bd      	mov	sp, r7
 8000228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	e000e100 	.word	0xe000e100

08000234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000234:	b480      	push	{r7}
 8000236:	b083      	sub	sp, #12
 8000238:	af00      	add	r7, sp, #0
 800023a:	4603      	mov	r3, r0
 800023c:	6039      	str	r1, [r7, #0]
 800023e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000244:	2b00      	cmp	r3, #0
 8000246:	db0a      	blt.n	800025e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000248:	683b      	ldr	r3, [r7, #0]
 800024a:	b2da      	uxtb	r2, r3
 800024c:	490c      	ldr	r1, [pc, #48]	; (8000280 <__NVIC_SetPriority+0x4c>)
 800024e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000252:	0112      	lsls	r2, r2, #4
 8000254:	b2d2      	uxtb	r2, r2
 8000256:	440b      	add	r3, r1
 8000258:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800025c:	e00a      	b.n	8000274 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800025e:	683b      	ldr	r3, [r7, #0]
 8000260:	b2da      	uxtb	r2, r3
 8000262:	4908      	ldr	r1, [pc, #32]	; (8000284 <__NVIC_SetPriority+0x50>)
 8000264:	79fb      	ldrb	r3, [r7, #7]
 8000266:	f003 030f 	and.w	r3, r3, #15
 800026a:	3b04      	subs	r3, #4
 800026c:	0112      	lsls	r2, r2, #4
 800026e:	b2d2      	uxtb	r2, r2
 8000270:	440b      	add	r3, r1
 8000272:	761a      	strb	r2, [r3, #24]
}
 8000274:	bf00      	nop
 8000276:	370c      	adds	r7, #12
 8000278:	46bd      	mov	sp, r7
 800027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027e:	4770      	bx	lr
 8000280:	e000e100 	.word	0xe000e100
 8000284:	e000ed00 	.word	0xe000ed00

08000288 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	3b01      	subs	r3, #1
 8000294:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000298:	d301      	bcc.n	800029e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800029a:	2301      	movs	r3, #1
 800029c:	e00f      	b.n	80002be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800029e:	4a0a      	ldr	r2, [pc, #40]	; (80002c8 <SysTick_Config+0x40>)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	3b01      	subs	r3, #1
 80002a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80002a6:	210f      	movs	r1, #15
 80002a8:	f04f 30ff 	mov.w	r0, #4294967295
 80002ac:	f7ff ffc2 	bl	8000234 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002b0:	4b05      	ldr	r3, [pc, #20]	; (80002c8 <SysTick_Config+0x40>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002b6:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <SysTick_Config+0x40>)
 80002b8:	2207      	movs	r2, #7
 80002ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80002bc:	2300      	movs	r3, #0
}
 80002be:	4618      	mov	r0, r3
 80002c0:	3708      	adds	r7, #8
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	e000e010 	.word	0xe000e010

080002cc <SysTick_Handler>:
uint16_t buf[SIZE] = {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0020};



void  SysTick_Handler(void)
 	     {
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
 	    	if (SysTick_Count > 0){
 80002d0:	4b06      	ldr	r3, [pc, #24]	; (80002ec <SysTick_Handler+0x20>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d004      	beq.n	80002e2 <SysTick_Handler+0x16>
 	    		SysTick_Count --;
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <SysTick_Handler+0x20>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	3b01      	subs	r3, #1
 80002de:	4a03      	ldr	r2, [pc, #12]	; (80002ec <SysTick_Handler+0x20>)
 80002e0:	6013      	str	r3, [r2, #0]
 	    	}
 	    	}
 80002e2:	bf00      	nop
 80002e4:	46bd      	mov	sp, r7
 80002e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ea:	4770      	bx	lr
 80002ec:	20000034 	.word	0x20000034

080002f0 <delay_ms>:

 void delay_ms(int ms){
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]

 	 SysTick_Count = ms;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	4a07      	ldr	r2, [pc, #28]	; (8000318 <delay_ms+0x28>)
 80002fc:	6013      	str	r3, [r2, #0]
 	 while (SysTick_Count){}
 80002fe:	bf00      	nop
 8000300:	4b05      	ldr	r3, [pc, #20]	; (8000318 <delay_ms+0x28>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	2b00      	cmp	r3, #0
 8000306:	d1fb      	bne.n	8000300 <delay_ms+0x10>

 	 }
 8000308:	bf00      	nop
 800030a:	bf00      	nop
 800030c:	370c      	adds	r7, #12
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	20000034 	.word	0x20000034

0800031c <GPIO_Init>:





void GPIO_Init(){
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0

		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; //RCC on for GPIO A
 8000320:	4b0f      	ldr	r3, [pc, #60]	; (8000360 <GPIO_Init+0x44>)
 8000322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000324:	4a0e      	ldr	r2, [pc, #56]	; (8000360 <GPIO_Init+0x44>)
 8000326:	f043 0301 	orr.w	r3, r3, #1
 800032a:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOA->MODER &= ~0x00000C00; /* clear pin mode */
 800032c:	4b0d      	ldr	r3, [pc, #52]	; (8000364 <GPIO_Init+0x48>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a0c      	ldr	r2, [pc, #48]	; (8000364 <GPIO_Init+0x48>)
 8000332:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000336:	6013      	str	r3, [r2, #0]
		GPIOA->MODER |= GPIO_MODER_MODER5_0; /* set pin to output mode */
 8000338:	4b0a      	ldr	r3, [pc, #40]	; (8000364 <GPIO_Init+0x48>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a09      	ldr	r2, [pc, #36]	; (8000364 <GPIO_Init+0x48>)
 800033e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000342:	6013      	str	r3, [r2, #0]
		GPIOA->OSPEEDR |= (GPIO_OSPEEDR_OSPEED5_0 | GPIO_OSPEEDR_OSPEED5_1 ); // very high
 8000344:	4b07      	ldr	r3, [pc, #28]	; (8000364 <GPIO_Init+0x48>)
 8000346:	689b      	ldr	r3, [r3, #8]
 8000348:	4a06      	ldr	r2, [pc, #24]	; (8000364 <GPIO_Init+0x48>)
 800034a:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800034e:	6093      	str	r3, [r2, #8]
		GPIOA->BSRR = GPIO_BSRR_BS5; // установили в высокое состояние
 8000350:	4b04      	ldr	r3, [pc, #16]	; (8000364 <GPIO_Init+0x48>)
 8000352:	2220      	movs	r2, #32
 8000354:	619a      	str	r2, [r3, #24]


		}
 8000356:	bf00      	nop
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr
 8000360:	40023800 	.word	0x40023800
 8000364:	40020000 	.word	0x40020000

08000368 <TIM1_UP_TIM10_IRQHandler>:


void TIM1_UP_TIM10_IRQHandler(void){
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
	if(READ_BIT(TIM2->SR, TIM_SR_UIF)){
 800036c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000370:	691b      	ldr	r3, [r3, #16]
 8000372:	f003 0301 	and.w	r3, r3, #1
 8000376:	2b00      	cmp	r3, #0
 8000378:	d007      	beq.n	800038a <TIM1_UP_TIM10_IRQHandler+0x22>


		TIM2->SR &= ~TIM_SR_UIF;
 800037a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800037e:	691b      	ldr	r3, [r3, #16]
 8000380:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000384:	f023 0301 	bic.w	r3, r3, #1
 8000388:	6113      	str	r3, [r2, #16]

	}

}
 800038a:	bf00      	nop
 800038c:	46bd      	mov	sp, r7
 800038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000392:	4770      	bx	lr

08000394 <TIM1_Init>:


void TIM1_Init(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
    /* Enable clock for TIM2 */
    RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8000398:	4b14      	ldr	r3, [pc, #80]	; (80003ec <TIM1_Init+0x58>)
 800039a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800039c:	4a13      	ldr	r2, [pc, #76]	; (80003ec <TIM1_Init+0x58>)
 800039e:	f043 0301 	orr.w	r3, r3, #1
 80003a2:	6453      	str	r3, [r2, #68]	; 0x44

    /* Initialize TIM2 */
    TIM1->PSC = 0; // Prescaler
 80003a4:	4b12      	ldr	r3, [pc, #72]	; (80003f0 <TIM1_Init+0x5c>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	629a      	str	r2, [r3, #40]	; 0x28
    TIM1->ARR = 1666 - 1; // Auto-reload value
 80003aa:	4b11      	ldr	r3, [pc, #68]	; (80003f0 <TIM1_Init+0x5c>)
 80003ac:	f240 6281 	movw	r2, #1665	; 0x681
 80003b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force update generation to update registers */
    TIM1->EGR |= TIM_EGR_UG;
 80003b2:	4b0f      	ldr	r3, [pc, #60]	; (80003f0 <TIM1_Init+0x5c>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	4a0e      	ldr	r2, [pc, #56]	; (80003f0 <TIM1_Init+0x5c>)
 80003b8:	f043 0301 	orr.w	r3, r3, #1
 80003bc:	6153      	str	r3, [r2, #20]

    /* Clear update interrupt flag */
   TIM1->SR &= ~TIM_SR_UIF;
 80003be:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <TIM1_Init+0x5c>)
 80003c0:	691b      	ldr	r3, [r3, #16]
 80003c2:	4a0b      	ldr	r2, [pc, #44]	; (80003f0 <TIM1_Init+0x5c>)
 80003c4:	f023 0301 	bic.w	r3, r3, #1
 80003c8:	6113      	str	r3, [r2, #16]

   TIM1->DIER |= TIM_DIER_TDE;
 80003ca:	4b09      	ldr	r3, [pc, #36]	; (80003f0 <TIM1_Init+0x5c>)
 80003cc:	68db      	ldr	r3, [r3, #12]
 80003ce:	4a08      	ldr	r2, [pc, #32]	; (80003f0 <TIM1_Init+0x5c>)
 80003d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003d4:	60d3      	str	r3, [r2, #12]

    TIM1->DIER |= TIM_DIER_UIE;
 80003d6:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <TIM1_Init+0x5c>)
 80003d8:	68db      	ldr	r3, [r3, #12]
 80003da:	4a05      	ldr	r2, [pc, #20]	; (80003f0 <TIM1_Init+0x5c>)
 80003dc:	f043 0301 	orr.w	r3, r3, #1
 80003e0:	60d3      	str	r3, [r2, #12]

    //TIM1->DIER |= TIM_DIER_UDE;// Update dma // Включаем запрос DMA по обновлению таймера

    /* Enable TIM2 global interrupt */

   NVIC_EnableIRQ(TIM2_IRQn);
 80003e2:	201c      	movs	r0, #28
 80003e4:	f7ff ff08 	bl	80001f8 <__NVIC_EnableIRQ>


}
 80003e8:	bf00      	nop
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	40023800 	.word	0x40023800
 80003f0:	40010000 	.word	0x40010000

080003f4 <DMA2_Stream5_IRQHandler>:


void DMA2_Stream5_IRQHandler(void){
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0


	if (READ_BIT(DMA2->HISR, DMA_HISR_HTIF5)){
 80003f8:	4b04      	ldr	r3, [pc, #16]	; (800040c <DMA2_Stream5_IRQHandler+0x18>)
 80003fa:	685b      	ldr	r3, [r3, #4]


	}

	if ((READ_BIT(DMA2->HISR, DMA_HISR_TCIF5))){ // передача по 2 каналу завершена полностью
 80003fc:	4b03      	ldr	r3, [pc, #12]	; (800040c <DMA2_Stream5_IRQHandler+0x18>)
 80003fe:	685b      	ldr	r3, [r3, #4]


		}

	}
 8000400:	bf00      	nop
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	40026400 	.word	0x40026400

08000410 <DMA_Init>:




void DMA_Init(void){
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8000414:	4b25      	ldr	r3, [pc, #148]	; (80004ac <DMA_Init+0x9c>)
 8000416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000418:	4a24      	ldr	r2, [pc, #144]	; (80004ac <DMA_Init+0x9c>)
 800041a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800041e:	6313      	str	r3, [r2, #48]	; 0x30
	DMA_Stream->CR = (DMA_SxCR_CHSEL_1 | DMA_SxCR_CHSEL_2)  ; // 6 канал 110
 8000420:	4b23      	ldr	r3, [pc, #140]	; (80004b0 <DMA_Init+0xa0>)
 8000422:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000426:	601a      	str	r2, [r3, #0]
	DMA_Stream->CR |= DMA_SxCR_MSIZE_0;// MSIZE 16 bit
 8000428:	4b21      	ldr	r3, [pc, #132]	; (80004b0 <DMA_Init+0xa0>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	4a20      	ldr	r2, [pc, #128]	; (80004b0 <DMA_Init+0xa0>)
 800042e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000432:	6013      	str	r3, [r2, #0]
	DMA_Stream->CR |= DMA_SxCR_PSIZE_0; // (0x0<<11); // PSIZE 16 bit
 8000434:	4b1e      	ldr	r3, [pc, #120]	; (80004b0 <DMA_Init+0xa0>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a1d      	ldr	r2, [pc, #116]	; (80004b0 <DMA_Init+0xa0>)
 800043a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800043e:	6013      	str	r3, [r2, #0]
	DMA_Stream->CR |= DMA_SxCR_MINC; // (0x1<<10); // увеличиваем память
 8000440:	4b1b      	ldr	r3, [pc, #108]	; (80004b0 <DMA_Init+0xa0>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	4a1a      	ldr	r2, [pc, #104]	; (80004b0 <DMA_Init+0xa0>)
 8000446:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800044a:	6013      	str	r3, [r2, #0]

	DMA_Stream->CR |= DMA_SxCR_DIR_0;  //  сбрасываю 7 бит 01 Из памяти в периф
 800044c:	4b18      	ldr	r3, [pc, #96]	; (80004b0 <DMA_Init+0xa0>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	4a17      	ldr	r2, [pc, #92]	; (80004b0 <DMA_Init+0xa0>)
 8000452:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000456:	6013      	str	r3, [r2, #0]



	DMA_Stream->CR |= DMA_SxCR_PL_1; // Приоритет потока: высокий
 8000458:	4b15      	ldr	r3, [pc, #84]	; (80004b0 <DMA_Init+0xa0>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a14      	ldr	r2, [pc, #80]	; (80004b0 <DMA_Init+0xa0>)
 800045e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000462:	6013      	str	r3, [r2, #0]
	DMA_Stream->CR |= DMA_SxCR_CIRC ;//(0x1<<8); Circular mode
 8000464:	4b12      	ldr	r3, [pc, #72]	; (80004b0 <DMA_Init+0xa0>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4a11      	ldr	r2, [pc, #68]	; (80004b0 <DMA_Init+0xa0>)
 800046a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800046e:	6013      	str	r3, [r2, #0]
	DMA_Stream->CR |= DMA_SxCR_TCIE;
 8000470:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <DMA_Init+0xa0>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a0e      	ldr	r2, [pc, #56]	; (80004b0 <DMA_Init+0xa0>)
 8000476:	f043 0310 	orr.w	r3, r3, #16
 800047a:	6013      	str	r3, [r2, #0]
	DMA_Stream->CR |= DMA_SxCR_HTIE;
 800047c:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <DMA_Init+0xa0>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a0b      	ldr	r2, [pc, #44]	; (80004b0 <DMA_Init+0xa0>)
 8000482:	f043 0308 	orr.w	r3, r3, #8
 8000486:	6013      	str	r3, [r2, #0]
	DMA_Stream->CR |= DMA_SxCR_TCIE;
 8000488:	4b09      	ldr	r3, [pc, #36]	; (80004b0 <DMA_Init+0xa0>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a08      	ldr	r2, [pc, #32]	; (80004b0 <DMA_Init+0xa0>)
 800048e:	f043 0310 	orr.w	r3, r3, #16
 8000492:	6013      	str	r3, [r2, #0]
	DMA_Stream->CR |= DMA_SxCR_TEIE;
 8000494:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <DMA_Init+0xa0>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4a05      	ldr	r2, [pc, #20]	; (80004b0 <DMA_Init+0xa0>)
 800049a:	f043 0304 	orr.w	r3, r3, #4
 800049e:	6013      	str	r3, [r2, #0]



}
 80004a0:	bf00      	nop
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	40023800 	.word	0x40023800
 80004b0:	40026488 	.word	0x40026488

080004b4 <DMA_Config>:

void DMA_Config(uint32_t perih_address, uint32_t mem_address , uint16_t data_amount ){
 80004b4:	b480      	push	{r7}
 80004b6:	b085      	sub	sp, #20
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	60f8      	str	r0, [r7, #12]
 80004bc:	60b9      	str	r1, [r7, #8]
 80004be:	4613      	mov	r3, r2
 80004c0:	80fb      	strh	r3, [r7, #6]

	DMA_Stream->NDTR = data_amount;
 80004c2:	4a0a      	ldr	r2, [pc, #40]	; (80004ec <DMA_Config+0x38>)
 80004c4:	88fb      	ldrh	r3, [r7, #6]
 80004c6:	6053      	str	r3, [r2, #4]

	DMA_Stream->PAR = perih_address;
 80004c8:	4a08      	ldr	r2, [pc, #32]	; (80004ec <DMA_Config+0x38>)
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	6093      	str	r3, [r2, #8]

	DMA_Stream->M0AR = mem_address;
 80004ce:	4a07      	ldr	r2, [pc, #28]	; (80004ec <DMA_Config+0x38>)
 80004d0:	68bb      	ldr	r3, [r7, #8]
 80004d2:	60d3      	str	r3, [r2, #12]

	DMA_Stream->CR |= DMA_SxCR_EN;
 80004d4:	4b05      	ldr	r3, [pc, #20]	; (80004ec <DMA_Config+0x38>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a04      	ldr	r2, [pc, #16]	; (80004ec <DMA_Config+0x38>)
 80004da:	f043 0301 	orr.w	r3, r3, #1
 80004de:	6013      	str	r3, [r2, #0]


}
 80004e0:	bf00      	nop
 80004e2:	3714      	adds	r7, #20
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr
 80004ec:	40026488 	.word	0x40026488

080004f0 <main>:

int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b086      	sub	sp, #24
 80004f4:	af00      	add	r7, sp, #0

	GPIO_Init();
 80004f6:	f7ff ff11 	bl	800031c <GPIO_Init>
	DMA_Init();
 80004fa:	f7ff ff89 	bl	8000410 <DMA_Init>
	DMA_Config( (uint32_t) &GPIOA->ODR , (uint32_t) buf, SIZE);
 80004fe:	4b37      	ldr	r3, [pc, #220]	; (80005dc <main+0xec>)
 8000500:	220a      	movs	r2, #10
 8000502:	4619      	mov	r1, r3
 8000504:	4836      	ldr	r0, [pc, #216]	; (80005e0 <main+0xf0>)
 8000506:	f7ff ffd5 	bl	80004b4 <DMA_Config>
	TIM1_Init();
 800050a:	f7ff ff43 	bl	8000394 <TIM1_Init>
	SysTick_Config(SystemCoreClock/1000);
 800050e:	4b35      	ldr	r3, [pc, #212]	; (80005e4 <main+0xf4>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4a35      	ldr	r2, [pc, #212]	; (80005e8 <main+0xf8>)
 8000514:	fba2 2303 	umull	r2, r3, r2, r3
 8000518:	099b      	lsrs	r3, r3, #6
 800051a:	4618      	mov	r0, r3
 800051c:	f7ff feb4 	bl	8000288 <SysTick_Config>
	TIM1->DIER |= TIM_DIER_UDE;// Update dma // Включаем запрос DMA по обновлению таймера
 8000520:	4b32      	ldr	r3, [pc, #200]	; (80005ec <main+0xfc>)
 8000522:	68db      	ldr	r3, [r3, #12]
 8000524:	4a31      	ldr	r2, [pc, #196]	; (80005ec <main+0xfc>)
 8000526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800052a:	60d3      	str	r3, [r2, #12]
	//TIM1->CR1 |= TIM_CR1_CEN; // включаем таймер TIM2
	DMA2->HISR |= DMA_HISR_TCIF5;
 800052c:	4b30      	ldr	r3, [pc, #192]	; (80005f0 <main+0x100>)
 800052e:	685b      	ldr	r3, [r3, #4]
 8000530:	4a2f      	ldr	r2, [pc, #188]	; (80005f0 <main+0x100>)
 8000532:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000536:	6053      	str	r3, [r2, #4]
	uint8_t Flag = 0x00;
 8000538:	2300      	movs	r3, #0
 800053a:	73fb      	strb	r3, [r7, #15]

	//NVIC_EnableIRQ(DMA1_Stream7_IRQn);


	char *a = "Hello";
 800053c:	4b2d      	ldr	r3, [pc, #180]	; (80005f4 <main+0x104>)
 800053e:	617b      	str	r3, [r7, #20]
	char *c = a;
 8000540:	697b      	ldr	r3, [r7, #20]
 8000542:	60bb      	str	r3, [r7, #8]
	while(1){

		//if(DMA2->HISR &= DMA_HISR_TCIF5){
			//TIM1->CR1 &= ~TIM_CR1_CEN; // включаем таймер TIM2

			while(*a){
 8000544:	e042      	b.n	80005cc <main+0xdc>
			uint8_t b = (uint8_t) *a++;
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	1c5a      	adds	r2, r3, #1
 800054a:	617a      	str	r2, [r7, #20]
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	71fb      	strb	r3, [r7, #7]
			//uint16_t buf[8] = {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000}; // исходный массив

			uint16_t mask = 0x0020; // маска для установки бита
 8000550:	2320      	movs	r3, #32
 8000552:	80bb      	strh	r3, [r7, #4]
			for(int i = 0; i < 8; i++) { // цикл по 8 элементам массива
 8000554:	2300      	movs	r3, #0
 8000556:	613b      	str	r3, [r7, #16]
 8000558:	e02b      	b.n	80005b2 <main+0xc2>
				  buf[i+1] = buf[i+1] & ~mask; // сбрасываем 6-й бит значения i-го элемента массива
 800055a:	693b      	ldr	r3, [r7, #16]
 800055c:	3301      	adds	r3, #1
 800055e:	4a1f      	ldr	r2, [pc, #124]	; (80005dc <main+0xec>)
 8000560:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000564:	b21a      	sxth	r2, r3
 8000566:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800056a:	43db      	mvns	r3, r3
 800056c:	b21b      	sxth	r3, r3
 800056e:	4013      	ands	r3, r2
 8000570:	b21a      	sxth	r2, r3
 8000572:	693b      	ldr	r3, [r7, #16]
 8000574:	3301      	adds	r3, #1
 8000576:	b291      	uxth	r1, r2
 8000578:	4a18      	ldr	r2, [pc, #96]	; (80005dc <main+0xec>)
 800057a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				  buf[i+1] = buf[i+1] | ((b >> i) & 0x01) << 5; // помещаем i-й бит из c в 6-й бит значения i-го элемента массива
 800057e:	693b      	ldr	r3, [r7, #16]
 8000580:	3301      	adds	r3, #1
 8000582:	4a16      	ldr	r2, [pc, #88]	; (80005dc <main+0xec>)
 8000584:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000588:	b21a      	sxth	r2, r3
 800058a:	79f9      	ldrb	r1, [r7, #7]
 800058c:	693b      	ldr	r3, [r7, #16]
 800058e:	fa41 f303 	asr.w	r3, r1, r3
 8000592:	015b      	lsls	r3, r3, #5
 8000594:	b21b      	sxth	r3, r3
 8000596:	f003 0320 	and.w	r3, r3, #32
 800059a:	b21b      	sxth	r3, r3
 800059c:	4313      	orrs	r3, r2
 800059e:	b21a      	sxth	r2, r3
 80005a0:	693b      	ldr	r3, [r7, #16]
 80005a2:	3301      	adds	r3, #1
 80005a4:	b291      	uxth	r1, r2
 80005a6:	4a0d      	ldr	r2, [pc, #52]	; (80005dc <main+0xec>)
 80005a8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int i = 0; i < 8; i++) { // цикл по 8 элементам массива
 80005ac:	693b      	ldr	r3, [r7, #16]
 80005ae:	3301      	adds	r3, #1
 80005b0:	613b      	str	r3, [r7, #16]
 80005b2:	693b      	ldr	r3, [r7, #16]
 80005b4:	2b07      	cmp	r3, #7
 80005b6:	ddd0      	ble.n	800055a <main+0x6a>
			}


			TIM1->CR1 |= TIM_CR1_CEN; // включаем таймер TIM2
 80005b8:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <main+0xfc>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a0b      	ldr	r2, [pc, #44]	; (80005ec <main+0xfc>)
 80005be:	f043 0301 	orr.w	r3, r3, #1
 80005c2:	6013      	str	r3, [r2, #0]
			delay_ms(1000);
 80005c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005c8:	f7ff fe92 	bl	80002f0 <delay_ms>
			while(*a){
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d1b8      	bne.n	8000546 <main+0x56>

			}
		//}
			a = c;
 80005d4:	68bb      	ldr	r3, [r7, #8]
 80005d6:	617b      	str	r3, [r7, #20]
			while(*a){
 80005d8:	e7f8      	b.n	80005cc <main+0xdc>
 80005da:	bf00      	nop
 80005dc:	20000004 	.word	0x20000004
 80005e0:	40020014 	.word	0x40020014
 80005e4:	20000000 	.word	0x20000000
 80005e8:	10624dd3 	.word	0x10624dd3
 80005ec:	40010000 	.word	0x40010000
 80005f0:	40026400 	.word	0x40026400
 80005f4:	080006ac 	.word	0x080006ac

080005f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005f8:	480d      	ldr	r0, [pc, #52]	; (8000630 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005fc:	f7ff fdea 	bl	80001d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000600:	480c      	ldr	r0, [pc, #48]	; (8000634 <LoopForever+0x6>)
  ldr r1, =_edata
 8000602:	490d      	ldr	r1, [pc, #52]	; (8000638 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000604:	4a0d      	ldr	r2, [pc, #52]	; (800063c <LoopForever+0xe>)
  movs r3, #0
 8000606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000608:	e002      	b.n	8000610 <LoopCopyDataInit>

0800060a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800060a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800060c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800060e:	3304      	adds	r3, #4

08000610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000614:	d3f9      	bcc.n	800060a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000616:	4a0a      	ldr	r2, [pc, #40]	; (8000640 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000618:	4c0a      	ldr	r4, [pc, #40]	; (8000644 <LoopForever+0x16>)
  movs r3, #0
 800061a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800061c:	e001      	b.n	8000622 <LoopFillZerobss>

0800061e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800061e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000620:	3204      	adds	r2, #4

08000622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000624:	d3fb      	bcc.n	800061e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000626:	f000 f811 	bl	800064c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800062a:	f7ff ff61 	bl	80004f0 <main>

0800062e <LoopForever>:

LoopForever:
  b LoopForever
 800062e:	e7fe      	b.n	800062e <LoopForever>
  ldr   r0, =_estack
 8000630:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000634:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000638:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 800063c:	080006bc 	.word	0x080006bc
  ldr r2, =_sbss
 8000640:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000644:	20000038 	.word	0x20000038

08000648 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000648:	e7fe      	b.n	8000648 <ADC_IRQHandler>
	...

0800064c <__libc_init_array>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	4d0d      	ldr	r5, [pc, #52]	; (8000684 <__libc_init_array+0x38>)
 8000650:	4c0d      	ldr	r4, [pc, #52]	; (8000688 <__libc_init_array+0x3c>)
 8000652:	1b64      	subs	r4, r4, r5
 8000654:	10a4      	asrs	r4, r4, #2
 8000656:	2600      	movs	r6, #0
 8000658:	42a6      	cmp	r6, r4
 800065a:	d109      	bne.n	8000670 <__libc_init_array+0x24>
 800065c:	4d0b      	ldr	r5, [pc, #44]	; (800068c <__libc_init_array+0x40>)
 800065e:	4c0c      	ldr	r4, [pc, #48]	; (8000690 <__libc_init_array+0x44>)
 8000660:	f000 f818 	bl	8000694 <_init>
 8000664:	1b64      	subs	r4, r4, r5
 8000666:	10a4      	asrs	r4, r4, #2
 8000668:	2600      	movs	r6, #0
 800066a:	42a6      	cmp	r6, r4
 800066c:	d105      	bne.n	800067a <__libc_init_array+0x2e>
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f855 3b04 	ldr.w	r3, [r5], #4
 8000674:	4798      	blx	r3
 8000676:	3601      	adds	r6, #1
 8000678:	e7ee      	b.n	8000658 <__libc_init_array+0xc>
 800067a:	f855 3b04 	ldr.w	r3, [r5], #4
 800067e:	4798      	blx	r3
 8000680:	3601      	adds	r6, #1
 8000682:	e7f2      	b.n	800066a <__libc_init_array+0x1e>
 8000684:	080006b4 	.word	0x080006b4
 8000688:	080006b4 	.word	0x080006b4
 800068c:	080006b4 	.word	0x080006b4
 8000690:	080006b8 	.word	0x080006b8

08000694 <_init>:
 8000694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000696:	bf00      	nop
 8000698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800069a:	bc08      	pop	{r3}
 800069c:	469e      	mov	lr, r3
 800069e:	4770      	bx	lr

080006a0 <_fini>:
 80006a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006a2:	bf00      	nop
 80006a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006a6:	bc08      	pop	{r3}
 80006a8:	469e      	mov	lr, r3
 80006aa:	4770      	bx	lr
